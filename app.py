import os
import streamlit as st
from PyPDF2 import PdfReader
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Streamlit
st.set_page_config(page_title="–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", page_icon="üèó")
st.title("üèó –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∫–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
# –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY —Å –≤–∞—à–∏–º –∫–ª—é—á–æ–º
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

PDF_FOLDER = "docs"

# –ó–∞–≥—Ä—É–∂–∞–µ–º PDF
def load_pdfs(folder):
    pdf_texts = []
    if not os.path.exists(folder):
        st.error(f"–ü–∞–ø–∫–∞ '{folder}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return pdf_texts
    for file in os.listdir(folder):
        if file.endswith(".pdf"):
            path = os.path.join(folder, file)
            reader = PdfReader(path)
            text = ""
            for page in reader.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"
            pdf_texts.append((file, text))
    return pdf_texts

pdf_texts = load_pdfs(PDF_FOLDER)

# –ü–æ–ª–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
question = st.text_input("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å:")

# –ü–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT
def ask_gpt(question, documents):
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–º–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Å–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    context = "\n\n".join([f"–î–æ–∫—É–º–µ–Ω—Ç: {doc[0]}\n{doc[1][:2000]}" for doc in documents])  # –ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤
    prompt = f"–¢—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç. –ò—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n{context}\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}"
    
    response = client.chat.completions.create(
        model="gpt-4o-mini", 
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2,
        max_tokens=500
    )
    answer = response.choices[0].message.content
    return answer

if question and pdf_texts:
    with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å..."):
        answer = ask_gpt(question, pdf_texts)
    st.markdown(f"**–û—Ç–≤–µ—Ç –ò–ò:**\n{answer}")
elif question:
    st.warning("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö PDF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
